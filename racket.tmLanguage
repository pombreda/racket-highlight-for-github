<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>rkt</string>
	</array>
	<key>name</key>
	<string>Racket (soegaard)</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>comment</key>
			<string>string datums  are enclosed in ". Inside a string \" is used to escape an ".</string>
			<key>match</key>
			<string>\"([^"])*\"</string>
			<key>name</key>
			<string>string.quoted.double</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>booleans</string>
			<key>match</key>
			<string>((\#[tT])|(\#[fF])|(\#true)|(\#false))(?=[()\[\]{}",'`;\ \s])</string>
			<key>name</key>
			<string>string.quoted.double</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>character datum</string>
			<key>match</key>
			<string>\#\\[A-Za-z]([A-Za-z])*</string>
			<key>name</key>
			<string>string.quoted.double</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>real - an optional sign followed by a number with a period</string>
			<key>match</key>
			<string>(([+\-]?)(([0-9])++)\.([0-9])*)(?=[()\[\]{}",'`;\ \s])</string>
			<key>name</key>
			<string>string.quoted.double</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>rationals - with an optional sign</string>
			<key>match</key>
			<string>((([+\-]?)([0-9])++)/([0-9])++)(?=[()\[\]{}",'`;\ \s])</string>
			<key>name</key>
			<string>string.quoted.double</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>integers - with an optional sign</string>
			<key>match</key>
			<string>(([+\-]?)([0-9])++)(?=[()\[\]{}",'`;\ \s])</string>
			<key>name</key>
			<string>string.quoted.double</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>void</string>
			<key>match</key>
			<string>\#void(?=[()\[\]{}",'`;\ \s])</string>
			<key>name</key>
			<string>string.quoted.double</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>symbol</string>
			<key>match</key>
			<string>\'([^#()\[\]{}",'`; \s]([^()\[\]{}",'`;\ \s])*)</string>
			<key>name</key>
			<string>string.quoted.double</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>quoted empty list</string>
			<key>match</key>
			<string>\'\(\)</string>
			<key>name</key>
			<string>string.quoted.double</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>keyword</string>
			<key>match</key>
			<string>\#\:([^#()\[\]{}",'`; \s]([^()\[\]{}",'`;\ \s])*)</string>
			<key>name</key>
			<string>string.quoted.double</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>syntax-quoted identifiers</string>
			<key>match</key>
			<string>\#\'([^#()\[\]{}",'`; \s]([^()\[\]{}",'`;\ \s])*)</string>
			<key>name</key>
			<string>string.quoted.double</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>string.quoted.double</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>syntax in the racket language</string>
			<key>match</key>
			<string>(\#\%app|\#\%datum|\#\%declare|\#\%expression|\#\%module\-begin|\#\%plain\-app|\#\%plain\-lambda|\#\%plain\-module\-begin|\#\%printing\-module\-begin|\#\%provide|\#\%require|\#\%stratified\-body|\#\%top|\#\%top\-interaction|\#\%variable\-reference|\-&gt;|\-&gt;\*|\-&gt;\*m|\-&gt;d|\-&gt;dm|\-&gt;i|\-&gt;m|\.\.\.|\:do\-in|==|=&gt;|_|absent|abstract|all\-defined\-out|all\-from\-out|and|any|augment|augment\*|augment\-final|augment\-final\*|augride|augride\*|begin|begin\-for\-syntax|begin0|case|case\-&gt;|case\-&gt;m|case\-lambda|class|class\*|class\-field\-accessor|class\-field\-mutator|class/c|class/derived|combine\-in|combine\-out|command\-line|compound\-unit|compound\-unit/infer|cond|contract|contract\-out|contract\-struct|contracted|define|define\-compound\-unit|define\-compound\-unit/infer|define\-contract\-struct|define\-custom\-hash\-types|define\-custom\-set\-types|define\-for\-syntax|define\-local\-member\-name|define\-logger|define\-match\-expander|define\-member\-name|define\-module\-boundary\-contract|define\-namespace\-anchor|define\-opt/c|define\-sequence\-syntax|define\-serializable\-class|define\-serializable\-class\*|define\-signature|define\-signature\-form|define\-struct|define\-struct/contract|define\-struct/derived|define\-syntax|define\-syntax\-rule|define\-syntaxes|define\-unit|define\-unit\-binding|define\-unit\-from\-context|define\-unit/contract|define\-unit/new\-import\-export|define\-unit/s|define\-values|define\-values\-for\-export|define\-values\-for\-syntax|define\-values/invoke\-unit|define\-values/invoke\-unit/infer|define/augment|define/augment\-final|define/augride|define/contract|define/final\-prop|define/match|define/overment|define/override|define/override\-final|define/private|define/public|define/public\-final|define/pubment|define/subexpression\-pos\-prop|delay|delay/idle|delay/name|delay/strict|delay/sync|delay/thread|do|else|except|except\-in|except\-out|export|extends|failure\-cont|false|false/c|field|field\-bound\?|file|flat\-murec\-contract|flat\-rec\-contract|for|for\*|for\*/and|for\*/first|for\*/fold|for\*/fold/derived|for\*/hash|for\*/hasheq|for\*/hasheqv|for\*/last|for\*/list|for\*/lists|for\*/mutable\-set|for\*/mutable\-seteq|for\*/mutable\-seteqv|for\*/or|for\*/product|for\*/set|for\*/seteq|for\*/seteqv|for\*/sum|for\*/vector|for\*/weak\-set|for\*/weak\-seteq|for\*/weak\-seteqv|for\-label|for\-meta|for\-syntax|for\-template|for/and|for/first|for/fold|for/fold/derived|for/hash|for/hasheq|for/hasheqv|for/last|for/list|for/lists|for/mutable\-set|for/mutable\-seteq|for/mutable\-seteqv|for/or|for/product|for/set|for/seteq|for/seteqv|for/sum|for/vector|for/weak\-set|for/weak\-seteq|for/weak\-seteqv|gen\:custom\-write|gen\:dict|gen\:equal\+hash|gen\:set|gen\:stream|generic|get\-field|if|implies|import|include|include\-at/relative\-to|include\-at/relative\-to/reader|include/reader|inherit|inherit\-field|inherit/inner|inherit/super|init|init\-depend|init\-field|init\-rest|inner|inspect|instantiate|interface|interface\*|invariant\-assertion|invoke\-unit|invoke\-unit/infer|lambda|lazy|let|let\*|let\*\-values|let\-syntax|let\-syntaxes|let\-values|let/cc|let/ec|letrec|letrec\-syntax|letrec\-syntaxes|letrec\-syntaxes\+values|letrec\-values|lib|link|local|local\-require|log\-debug|log\-error|log\-fatal|log\-info|log\-warning|match|match\*|match\*/derived|match\-define|match\-define\-values|match\-lambda|match\-lambda\*|match\-lambda\*\*|match\-let|match\-let\*|match\-let\*\-values|match\-let\-values|match\-letrec|match/derived|match/values|member\-name\-key|method\-contract\?|mixin|module|module\*|module\+|nand|new|nor|object\-contract|object/c|only|only\-in|only\-meta\-in|open|opt/c|or|overment|overment\*|override|override\*|override\-final|override\-final\*|parameterize|parameterize\*|parameterize\-break|parametric\-&gt;/c|place|place\*|planet|prefix|prefix\-in|prefix\-out|private|private\*|prompt\-tag/c|protect\-out|provide|provide\-signature\-elements|provide/contract|public|public\*|public\-final|public\-final\*|pubment|pubment\*|quasiquote|quasisyntax|quasisyntax/loc|quote|quote\-syntax|quote\-syntax/prune|recontract\-out|recursive\-contract|relative\-in|rename|rename\-in|rename\-inner|rename\-out|rename\-super|require|send|send\*|send\+|send\-generic|send/apply|send/keyword\-apply|set!|set!\-values|set\-field!|shared|stream|stream\-cons|struct|struct\*|struct\-copy|struct\-field\-index|struct\-out|struct/c|struct/ctc|struct/dc|submod|super|super\-instantiate|super\-make\-object|super\-new|syntax|syntax\-case|syntax\-case\*|syntax\-id\-rules|syntax\-rules|syntax/loc|tag|this|this\%|thunk|thunk\*|time|unconstrained\-domain\-&gt;|unit|unit\-from\-context|unit/c|unit/new\-import\-export|unit/s|unless|unquote|unquote\-splicing|unsyntax|unsyntax\-splicing|values/drop|when|with\-continuation\-mark|with\-contract|with\-handlers|with\-handlers\*|with\-method|with\-syntax|Î»)(?=[()\[\]{}",'`;\ \s])</string>
			<key>name</key>
			<string>string.quoted.double</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>identifiers</string>
			<key>match</key>
			<string>([^#()\[\]{}",'`; \s]([^()\[\]{}",'`;\ \s])*)</string>
			<key>name</key>
			<string>variable</string>
		</dict>
		<dict>
			<key>comment</key>
			<false/>
			<key>match</key>
			<string>\#\;</string>
			<key>name</key>
			<string>comment.sexp</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>; comments begins with ; and extends to the end of the line</string>
			<key>match</key>
			<string>;.*$</string>
			<key>name</key>
			<string>comment.line.semicolon</string>
		</dict>
	</array>
	<key>scopeName</key>
	<string>source.racket</string>
	<key>uuid</key>
	<string>c5160d97-e918-473b-a594-3d22afffc0a7</string>
</dict>
</plist>
